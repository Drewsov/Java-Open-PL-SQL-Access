[Version]
$Id: sqlcodes.properties,v 1.8 2005/04/19 11:43:13 Bob Exp $

[sendEnv]
begin NN$PSP_REQ.init; NN$PSP_REQ.setCGIEnv(?,?); end;

[doProc]
begin NN$PSP_RSP.go(?,?); NN$PSP_RSP.getPage(?,?); end;

[doDownload]
begin {P}; NN$PSP_RSP.getPage(?,?); end;

[doUpload]
declare
  s number;
  n varchar2(256) := ?;
  m varchar2(128) := ?; 
  b blob          := ?;
begin
  s := sys.dbms_lob.getLength(b);
  update {T} set DOC_SIZE=s, MIME_TYPE=m, BLOB_CONTENT=b, LAST_UPDATED=sysdate
   where NAME=n;
  if (sql%rowcount = 0) then
    insert into {T}
    (NAME,MIME_TYPE,DOC_SIZE,DAD_CHARSET,LAST_UPDATED,CONTENT_TYPE,BLOB_CONTENT)
    values(n, m, s, 'ascii', sysdate, 'BLOB', b);
  end if;
  commit;
end;

[sendEnvOWA]
declare
  en {A} := ?;
  ev {A} := ?;
  an OWA.vc_arr;
  av OWA.vc_arr;
  i  binary_integer;
  j  binary_integer := 0;
begin
  i := en.first;
  while (i is not null) loop
    j := j + 1;
    an(j) := en(i);
    av(j) := ev(i);
    i := en.next(i);
  end loop;
  i := OWA.initialize;
  OWA.init_cgi_env(j, an, av);
end;

[doProcOWAFlex2]
declare
  pn {A} := ?;
  pv {A} := ?;
  ns {F1};
  vs {F2};
  i  binary_integer;
  j  binary_integer := 0;
begin
  i := pn.first;
  while (i is not null) loop
    j := j + 1;
    ns(j) := pn(i);
    vs(j) := pv(i);
    i := pn.next(i);
  end loop;
  {P}(ns, vs);
end;

[doProcOWAFlex4]
declare
  pn {A} := ?;
  pv {A} := ?;
  ns {F1};
  vs {F2};
  i  binary_integer;
  j  binary_integer := 0;
begin
  i := pn.first;
  while (i is not null) loop
    j := j + 1;
    ns(j) := pn(i);
    vs(j) := pv(i);
    i := pn.next(i);
  end loop;
  {P}(j, ns, vs, vs);
end;

[getPageOWA]
declare
  LF constant char(1) := chr(10);
  pg HTP.htbuf_arr;
  r  raw(32765);
  n  number := 32767;
  i  binary_integer := 1;
  h  varchar2(32767) := '';
  b  blob;
  cs varchar2(100) := ?;
procedure wb( s in raw )
is
begin
  if (s is NULL) then return; end if;
  if ( sys.utl_raw.length(r) + sys.utl_raw.length(s) > 32765 ) then
    sys.dbms_lob.writeAppend(b, sys.utl_raw.length(r), r);
    r := s;
  else
    r := sys.utl_raw.concat(r, s);
  end if;
end wb;
begin
  OWA.get_page(pg, n);
  while (i <= n) loop exit when (pg(i) = LF);
    h := h || pg(i);
    i := i + 1;
  end loop;
  sys.dbms_lob.createTemporary(b, true, sys.dbms_lob.CALL);
  i := i + 1;
  while (i <= n) loop
    wb(sys.utl_raw.cast_to_raw(convert(pg(i),cs)));
    i := i + 1;
  end loop;
  if (sys.utl_raw.length(r) > 0) then
    sys.dbms_lob.writeAppend(b, sys.utl_raw.length(r), r);
  end if;
  ? := h;  ? := b;
  sys.dbms_lob.freeTemporary(b);
end;

[getArgType]
declare
  a  varchar2(64);  b  varchar2(64);
  c  varchar2(64);  d  varchar2(64);
  m  number;        n  number;
  p  varchar2(256) := ?;
  i  number        := ?;
  s  varchar2(256);
  o  number        := ?;
begin
  SYS.DBMS_UTILITY.name_resolve(p, 1, a, b, c, d, m, n);
  select TYPE_OWNER, TYPE_NAME, TYPE_SUBNAME, DATA_TYPE
    into a, b, c, d from ALL_ARGUMENTS
    where OWNER = a and OBJECT_NAME = c
      and ((PACKAGE_NAME = b) or ((PACKAGE_NAME is null) and (b is null)))
      and ((OVERLOAD = o) or (OVERLOAD is null))
      and DATA_LEVEL = 0 and IN_OUT='IN' and POSITION = i;
  if (b is not null) then
    s := b;
    if (a is not null) then s := a || '.' || s; end if;
    if (c is not null) then s := s || '.' || c; end if;
  else
    s := d;
    d := NULL;
  end if;
  ? := s;
  ? := d;
end;

[getArgName]
declare
  a  varchar2(64);  b  varchar2(64);
  c  varchar2(64);  d  varchar2(64);
  m  number;        n  number;
  p  varchar2(256) := ?;
  i  number        := ?;
  o  number        := ?;
begin
  SYS.DBMS_UTILITY.name_resolve(p, 1, a, b, c, d, m, n);
  select ARGUMENT_NAME
    into a from ALL_ARGUMENTS
    where OWNER = a and OBJECT_NAME = c
      and ((PACKAGE_NAME = b) or ((PACKAGE_NAME is null) and (b is null)))
      and ((OVERLOAD = o) or (OVERLOAD is null))
      and DATA_LEVEL = 0 and IN_OUT='IN' and POSITION = i;
  ? := a;
end;

[getOverloadCount]
declare
  a  varchar2(64);  b  varchar2(64);
  c  varchar2(64);  d  varchar2(64);
  m  number;        n  number;
  p  varchar2(256) := ?;
begin
  SYS.DBMS_UTILITY.name_resolve(p, 1, a, b, c, d, m, n);
  select max(TO_NUMBER(OVERLOAD))
    into n from ALL_ARGUMENTS
   where OWNER = a and OBJECT_NAME = c
     and ((PACKAGE_NAME = b) or ((PACKAGE_NAME is null) and (b is null)));
  ? := n;
end;

[doDownloadOWA]
declare
  info varchar2(4000) := null;
begin
  {P};
  if (wpg_docload.is_file_download) then
    wpg_docload.get_download_file(info);
  end if;
  ? := info;
end;

[doDownloadContentDisposition]
declare
  info varchar2(4000) := null;
begin
  -- {P};
  if (wpg_docload.is_file_download) then
    wpg_docload.get_download_file(info);
  end if;
  ? := info;
end;

[getPageBlob]
declare
  LF constant char(1) := chr(10);
  pg HTP.htbuf_arr;
  n  number := 32767;
  i  binary_integer := 1;
  h  varchar2(32767) := '';
  b  blob;
begin
  OWA.get_page(pg, n);
  while (i <= n) loop exit when (pg(i) = LF);
    h := h || pg(i);
    i := i + 1;
  end loop;
  wpg_docload.get_download_blob(b);
  ? := h;  ? := b;
end;

[getPageData]
declare
  sName varchar2(256) := ?;
begin
  select BLOB_CONTENT into ? from {T} where NAME = sName;
end;

[getPageDataDAV]
begin
  select BLOB_CONTENT, DOC_SIZE, MIME_TYPE, LAST_UPDATED into ?, ?, ?, ? from {T} where ID = ?;
end;

[materializeNTSNode]
declare
  r  NN$NTS.tNode;
begin
  NN$NTS.getNode(r, ?);
  ? := r.ID_FOLDER;
  ? := r.PATH;
  ? := r.NAME;
  ? := r.ACCL;
  ? := r.DISP;
  ? := r.ID_REF;
  ? := r.REF_SIZE;
  ? := r.DATA;
  ? := r.TIME_STAMP;
end;

[authenticateDAV]
declare
  sPerson   varchar2(64) := ?;
  sPassword varchar2(64) := ?;
  sPerm     varchar2(64);
  iAccl     integer      := 0;
begin
  NN$PSP_RT.checkPerson(sPerson, sPassword, iAccl);
  if (iAccl > 0) then
    NN$PSP_RT.getPermissions(sPerson, sys_context('USERENV', 'SESSION_USER'), sPerm);
       if (instr(sPerm, 'A', 1) > 0) then iAccl := 6;
    elsif (instr(sPerm, 'D', 1) > 0) then iAccl := 5;
    elsif (instr(sPerm, 'C', 1) > 0) then iAccl := 4;
    elsif (instr(sPerm, 'E', 1) > 0) then iAccl := 3;
    elsif (instr(sPerm, 'V', 1) > 0) then iAccl := 2;
    end if;
  end if;
  ? := iAccl;
end;

[copyNodeDAV]
begin ? := NN$NTS.copyNode(?, ?, ?); end;

[insertCollectionDAV]
begin
  ? := NN$NTS.ensureNode(?, ?, 'DIR');
  commit;
end;

[deleteNodeDAV]
declare
  nKey  number := ?;
  sDisp varchar2(4);
  nRef  number;
  nRes  number;
begin
  sDisp := NN$NTS.getDisp(nKey);
  nRef  := NN$NTS.getRef(nKey);
  nRes  := NN$NTS.deleteNode(nKey);
  if (nRes > 0) then
    if (sDisp = 'PSP') then
      nRef := NN$PSP_UNIT.deleteUnit(nRef);
    end if;
    commit;
  end if;
  ? := nRes;
end;

[insertDataDAV]
declare
  nDir  number       := ?;
  sName varchar2(64) := ?;
  data  blob         := ?;
  sType varchar2(64) := ?;
  nRef  number;
  nKey  number;
  nSize number;
  n     number;
begin
  nSize := sys.dbms_lob.getLength(data);
  insert into {T} (BLOB_CONTENT, DOC_SIZE, NAME, MIME_TYPE)
  values (data, nSize, sName, sType)
  returning ID into nRef;
  nKey := NN$NTS.ensureNode(nDir, sName, 'DAT');
  n := NN$NTS.setDisp(nKey, 'DAT');
  n := NN$NTS.setRef(nKey, nRef);
  n := NN$NTS.setSize(nKey, nSize);
  n := NN$NTS.setData(nKey, sType);
  ? := nKey;
  commit;
end;

[updateDataDAV]
declare
  data  blob  := ?;
begin
  update {T} set BLOB_CONTENT = data,
    DOC_SIZE = sys.dbms_lob.getLength(data)
   where ID = ?;
  commit;
end;

[createUnitDAV]
declare
  nDir  number         := ?;
  sName varchar2(64)   := ?;
  prof  varchar2(4096) := ?;
  code  clob;
  nRef  number;
  nKey  number;
  n     number;
begin
  nRef := NN$PSP_UNIT.getFreeUnitID;
  nKey := NN$NTS.ensureNode(nDir, sName, 'PSP');
  n := NN$NTS.setDisp(nKey, 'PSP');
  n := NN$NTS.setRef(nKey, nRef);
  NN$PSP_UNIT.storeCode(nRef, empty_clob());
  NN$PSP_UNIT.storeProfile(nRef, prof);
end;

[insertUnitBlobDAV]
declare
  nDir  number         := ?;
  sName varchar2(64)   := ?;
  code  blob           := ?;
  prof  varchar2(4096) := ?;
  nRef  number         := ?;
  nKey  number;
  n     number;
begin
  if (nRef is null) then nRef := NN$PSP_UNIT.getFreeUnitID; end if;
  nKey := NN$NTS.ensureNode(nDir, sName, 'PSP');
  n := NN$NTS.setDisp(nKey, 'PSP');
  n := NN$NTS.setRef(nKey, nRef);
  NN$PSP_UNIT.storeCodeBlob(nRef, code);
  NN$PSP_UNIT.storeProfile(nRef, prof);
  commit;
  ? := nKey;
end;

[updateUnitBlobDAV]
declare
  nRef  number := ?;
begin
  NN$PSP_UNIT.storeCodeBlob(nRef, ?);
  NN$PSP_UNIT.storeProfile(nRef, ?);
  commit;
end;

[DPSPImportUnit]
declare
    unitcode clob  := ?;
    nts_path varchar2(4096) := ?;
    prof   nn$psp_unit.tProfile;
    code   clob;
    nUID   number := NULL;
    uName  varchar2(4000);
    uCType varchar2(64);
    uPType varchar2(64);
begin

    dbms_lob.createTemporary(code, false, dbms_lob.call);

    if (dbms_lob.getLength(unitcode) = 0) then
        raise_application_error(-20001, 'The unit is empty or does not exist.');
    else
        -- detect the attributes section and extract attributes into prof and
        -- psp code into code.
        declare
            l_start pls_integer;
            l_end   pls_integer;
            pro_str varchar2(4000);
        begin
            l_start := dbms_lob.instr(unitcode, '<%@attributes') +
                       length('<%@attributes');
            if (l_start = 0) then
                raise_application_error(-20001
                                       ,'Unit attributes section was not found or is malformed.');
            end if;
            l_end   := dbms_lob.instr(unitcode, '%>', l_start);
            pro_str := dbms_lob.substr(unitcode, l_end - l_start, l_start);
            nn$psp_unit.splitProfile(pro_str, prof);
            dbms_lob.copy(code
                         ,unitcode
                         ,dbms_lob.getLength(unitcode) - (l_end + 1)
                         ,1
                         ,l_end + 2);
        end;
    
        -- find out the unit id, either from attributes, from logical name (attempt
        -- name resolution), or get a new id. Loop through the profile once and
        -- save ID, NAME, CODE_TYPE and PROCESSOR attribute values for future use.
        for i in 1 .. prof.count loop
            if (prof(i).sName = 'ID') then
                nUID := to_number(prof(i).sData);
            elsif (prof(i).sName = 'NAME') then
                uName := prof(i).sData;
            elsif (prof(i).sName = 'CODE_TYPE') then
                uCType := prof(i).sData;
            elsif (prof(i).sName = 'PROCESSOR') then
                uPType := prof(i).sData;
            elsif (prof(i).sName = 'DOMAIN') then
                prof(i).sData := user;
            end if;
        end loop;
        if (nUID is NULL) then
            nUID := nn$psp_unit.resolveName(uName, user);
        end if;
        if (nUID is NULL) then
            nUID := nn$psp_unit.getFreeUnitID;
        end if;
        if (nUID is NULL) then
            raise_application_error(-20001, 'Unable to determine Unit ID.');
        end if;
        nn$psp_unit.storeCode(nUID, code);
        nn$psp_unit.storeProfile(nUID, prof);
    end if;
    if (nts_path is not NULL) then
        declare
            sErr varchar2(4000);
        begin
            NN$NTS.ensureLink(sErr
                             ,nts_path||'/'||uName
                             ,'PSP'
                             ,nUID
                             ,dbms_lob.getLength(code)
                             ,NVL(uCType, 'HTML') || '/' || NVL(uPType, 'FLAT'));
            if (sErr is not NULL) then
                raise_application_error(-20001
                                       ,'Error while registering unit with NTS: ' || sErr);
            end if;
        end;
    end if;
end;
